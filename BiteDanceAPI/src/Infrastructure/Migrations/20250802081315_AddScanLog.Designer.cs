// <auto-generated />
using System;
using BiteDanceAPI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BiteDanceAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250802081315_AddScanLog")]
    partial class AddScanLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Checkin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Datetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.HasIndex("Type", "UserId", "Datetime");

                    b.ToTable("Checkins");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.DailyMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("MonthlyMenuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyMenuId");

                    b.ToTable("DailyMenus");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.DailyOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Date", "Status");

                    b.HasIndex("UserId", "LocationId", "Date");

                    b.HasIndex("LocationId", "UserId", "Date", "Status");

                    b.ToTable("DailyOrders");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.DepartmentChargeCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name");

                    b.ToTable("DepartmentChargeCodes");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("Name");

                    b.HasIndex("SupplierId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableShift1")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableShift2")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableShift3")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableWeekday")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableWeekend")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.MonthlyMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("MonthlyMenus");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.PaymentScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePrice")
                        .HasColumnType("int");

                    b.Property<int>("CodeType")
                        .HasColumnType("int");

                    b.Property<int>("DiscountFlatPrice")
                        .HasColumnType("int");

                    b.Property<int>("DiscountPer")
                        .HasColumnType("int");

                    b.Property<int>("FinalDiscount")
                        .HasColumnType("int");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PaymentSchemes");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.RedCodeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentChargeCodeId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("GuestPurposeOfVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumbers")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WorkEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<int>("WorkLocationId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("checkInDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("DepartmentChargeCodeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FullName");

                    b.HasIndex("WorkEmail");

                    b.HasIndex("WorkLocationId");

                    b.ToTable("RedCodeRequests");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.ScanCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisabledReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ValidTill")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ValidFrom")
                        .IsDescending();

                    b.ToTable("ScanCode");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.ScanLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScanCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ScanTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ShiftOrderId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScanLogs");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.ShiftMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyMenuId")
                        .HasColumnType("int");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailyMenuId");

                    b.ToTable("ShiftMenus");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.ShiftOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyOrderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftMenuId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailyOrderId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ShiftMenuId");

                    b.ToTable("ShiftOrders");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateOfBusinessNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ContractEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ContractStartDate")
                        .HasColumnType("date");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AllowNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreferredLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PreferredLocationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DishShiftMenu", b =>
                {
                    b.Property<int>("DishesId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftMenuId")
                        .HasColumnType("int");

                    b.HasKey("DishesId", "ShiftMenuId");

                    b.HasIndex("ShiftMenuId");

                    b.ToTable("DishShiftMenu");
                });

            modelBuilder.Entity("DishShiftOrder", b =>
                {
                    b.Property<int>("DishesId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftOrderId")
                        .HasColumnType("int");

                    b.HasKey("DishesId", "ShiftOrderId");

                    b.HasIndex("ShiftOrderId");

                    b.ToTable("DishShiftOrder");
                });

            modelBuilder.Entity("LocationUser", b =>
                {
                    b.Property<string>("AdminsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AssignedLocationsId")
                        .HasColumnType("int");

                    b.HasKey("AdminsId", "AssignedLocationsId");

                    b.HasIndex("AssignedLocationsId");

                    b.ToTable("LocationUser");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.BlueCheckin", b =>
                {
                    b.HasBaseType("BiteDanceAPI.Domain.Entities.Checkin");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.GreenCheckin", b =>
                {
                    b.HasBaseType("BiteDanceAPI.Domain.Entities.Checkin");

                    b.Property<int>("ShiftOrderId")
                        .HasColumnType("int");

                    b.HasIndex("ShiftOrderId")
                        .IsUnique()
                        .HasFilter("[ShiftOrderId] IS NOT NULL");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.PurpleCheckin", b =>
                {
                    b.HasBaseType("BiteDanceAPI.Domain.Entities.Checkin");

                    b.Property<int>("ScanCodeId")
                        .HasColumnType("int");

                    b.HasIndex("ScanCodeId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.RedCheckin", b =>
                {
                    b.HasBaseType("BiteDanceAPI.Domain.Entities.Checkin");

                    b.Property<int>("ScanCodeId")
                        .HasColumnType("int");

                    b.HasIndex("ScanCodeId");

                    b.ToTable("Checkins", t =>
                        {
                            t.Property("ScanCodeId")
                                .HasColumnName("RedCheckin_ScanCodeId");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.PurpleScanCode", b =>
                {
                    b.HasBaseType("BiteDanceAPI.Domain.Entities.ScanCode");

                    b.Property<string>("IssuerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxNumScans")
                        .HasColumnType("int");

                    b.HasIndex("IssuerId");

                    b.ToTable("ScanCode", t =>
                        {
                            t.Property("MaxNumScans")
                                .HasColumnName("PurpleScanCode_MaxNumScans");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.RedScanCode", b =>
                {
                    b.HasBaseType("BiteDanceAPI.Domain.Entities.ScanCode");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumScans")
                        .HasColumnType("int");

                    b.Property<int>("OrderNumbers")
                        .HasColumnType("int");

                    b.Property<string>("RedCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RedCodeRequestId")
                        .HasColumnType("int");

                    b.HasIndex("LocationId");

                    b.HasIndex("RedCodeId")
                        .IsUnique()
                        .HasFilter("[RedCodeId] IS NOT NULL");

                    b.HasIndex("RedCodeRequestId")
                        .IsUnique()
                        .HasFilter("[RedCodeRequestId] IS NOT NULL");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Checkin", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.DailyMenu", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.MonthlyMenu", "MonthlyMenu")
                        .WithMany("DailyMenus")
                        .HasForeignKey("MonthlyMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthlyMenu");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.DailyOrder", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.DepartmentChargeCode", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Department", "Department")
                        .WithMany("ChargeCodes")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Dish", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Location", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Supplier", "Supplier")
                        .WithMany("AssignedLocations")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.MonthlyMenu", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.PaymentScheme", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.RedCodeRequest", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.DepartmentChargeCode", "DepartmentChargeCode")
                        .WithMany()
                        .HasForeignKey("DepartmentChargeCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BiteDanceAPI.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", "WorkLocation")
                        .WithMany()
                        .HasForeignKey("WorkLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("DepartmentChargeCode");

                    b.Navigation("WorkLocation");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.ShiftMenu", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.DailyMenu", "DailyMenu")
                        .WithMany("ShiftMenus")
                        .HasForeignKey("DailyMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyMenu");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.ShiftOrder", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.DailyOrder", "DailyOrder")
                        .WithMany("ShiftOrders")
                        .HasForeignKey("DailyOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.ShiftMenu", "ShiftMenu")
                        .WithMany()
                        .HasForeignKey("ShiftMenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DailyOrder");

                    b.Navigation("Location");

                    b.Navigation("ShiftMenu");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", "PreferredLocation")
                        .WithMany()
                        .HasForeignKey("PreferredLocationId");

                    b.Navigation("PreferredLocation");
                });

            modelBuilder.Entity("DishShiftMenu", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.ShiftMenu", null)
                        .WithMany()
                        .HasForeignKey("ShiftMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DishShiftOrder", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.ShiftOrder", null)
                        .WithMany()
                        .HasForeignKey("ShiftOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationUser", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AdminsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("AssignedLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.GreenCheckin", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.ShiftOrder", "ShiftOrder")
                        .WithOne()
                        .HasForeignKey("BiteDanceAPI.Domain.Entities.GreenCheckin", "ShiftOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftOrder");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.PurpleCheckin", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.ScanCode", "ScanCode")
                        .WithMany()
                        .HasForeignKey("ScanCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScanCode");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.RedCheckin", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.ScanCode", "ScanCode")
                        .WithMany()
                        .HasForeignKey("ScanCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScanCode");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.PurpleScanCode", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.User", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.RedScanCode", b =>
                {
                    b.HasOne("BiteDanceAPI.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiteDanceAPI.Domain.Entities.RedCodeRequest", "RedCodeRequest")
                        .WithOne("RedScanCode")
                        .HasForeignKey("BiteDanceAPI.Domain.Entities.RedScanCode", "RedCodeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("RedCodeRequest");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.DailyMenu", b =>
                {
                    b.Navigation("ShiftMenus");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.DailyOrder", b =>
                {
                    b.Navigation("ShiftOrders");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Department", b =>
                {
                    b.Navigation("ChargeCodes");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.MonthlyMenu", b =>
                {
                    b.Navigation("DailyMenus");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.RedCodeRequest", b =>
                {
                    b.Navigation("RedScanCode");
                });

            modelBuilder.Entity("BiteDanceAPI.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("AssignedLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
