/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/swagger/Checkins/blue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CheckinBlueQr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Checkins/green": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CheckinGreenQr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Checkins/red": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CheckinRedQr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Checkins/blue/weekly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetWeeklyBlueCheckins"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Checkins/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ExportFteCheckins"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Departments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetDepartments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetLocations"];
        put?: never;
        post: operations["CreateLocation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Locations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetLocation"];
        put: operations["UpdateLocation"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Locations/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ActivateLocation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Locations/{id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DeactivateLocation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/MonthlyMenus/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetMonthlyMenuTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/MonthlyMenus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetMonthlyMenus"];
        put?: never;
        post: operations["CreateMonthlyMenus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/MonthlyMenus/weekly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetWeeklyMenu"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/MonthlyMenus/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetMonthlyMenusStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/MonthlyMenus/{id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteMonthlyMenus"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/MonthlyMenus/{id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PublishMonthlyMenu"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetWeeklyOrders"];
        put?: never;
        post: operations["CreateOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Orders/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetWeeklyOrdersStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Orders/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CancelOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/RedCodes/requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetRedCodeRequests"];
        put?: never;
        post: operations["RequestRedCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/RedCodes/myrequests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetMyRedCodeRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/RedCodes/redcodes/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DisableRedCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/RedCodes/requests/{locationId}/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetRedCodeRequestsSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/RedCodes/requests/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ApproveRedCodeRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/RedCodes/requests/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["RejectRedCodeRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Reports/order/dailyReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetDailyOrdersReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Reports/checkin/dailyReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetShiftCheckinsReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Logs/LogScanCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SubmitLog"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Suppliers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetSuppliers"];
        put?: never;
        post: operations["CreateSupplier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Suppliers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetSupplier"];
        put: operations["UpdateSupplier"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Suppliers/SupplierMapping/{UserId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUserSupplier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Suppliers/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ActivateSupplier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Suppliers/{id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DeactivateSupplier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/System/configs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetConfigs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetMe"];
        put: operations["UpdateProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Users/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Users/admins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAdmins"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Users/admins/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["UpdateAdmin"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swagger/Users/admins/{email}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DeactivateAdmin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        CheckinResult: {
            isSuccess: boolean;
            message: string;
            codeType: components["schemas"]["CodeType"];
            dishNames: string[];
            employeeName: string;
            /** Format: date-time */
            scannedAt: string;
        };
        /** @enum {integer} */
        CodeType: CodeType;
        CustomErrorResponse: {
            /** Format: int32 */
            status: number;
            title: string;
            detail: string;
            errors: {
                [key: string]: string[];
            };
        };
        CheckinBlueQrCommand: {
            /** Format: int32 */
            locationId: number;
            userId: string;
        };
        CheckinGreenQrCommand: {
            /** Format: int32 */
            locationId: number;
            userId: string;
        };
        CheckinRedQrCommand: {
            /** Format: int32 */
            locationId: number;
            scanCodeId: string;
        };
        WeeklyBlueCheckinDto: {
            /** Format: int32 */
            maxScansPerDay: number;
            /** Format: int32 */
            maxScansPerWeek: number;
            /** Format: int32 */
            scansThisWeek: number;
            /** Format: int32 */
            scansRemaining: number;
            checkins: components["schemas"]["BlueCheckinDto"][];
        };
        BlueCheckinDto: {
            /** Format: int32 */
            id: number;
            /** Format: date-time */
            datetime: string;
            locationName: string;
        };
        DepartmentDto: {
            /** Format: int32 */
            id: number;
            name: string;
            chargeCodes: components["schemas"]["DepartmentChargeCodeDto"][];
        };
        DepartmentChargeCodeDto: {
            /** Format: int32 */
            id: number;
            name: string;
            code?: string | null;
        };
        LocationDto: {
            /** Format: int32 */
            id: number;
            name: string;
            description: string;
            type: components["schemas"]["LocationType"];
            city: string;
            country: string;
            enableShift1: boolean;
            enableShift2: boolean;
            enableShift3: boolean;
            enableWeekday: boolean;
            enableWeekend: boolean;
            isActive: boolean;
            /** Format: int32 */
            supplierId?: number | null;
            supplierName?: string | null;
            admins: components["schemas"]["UserDto"][];
        };
        /** @enum {integer} */
        LocationType: LocationType;
        UserDto: {
            id: string;
            email: string;
            name: string;
            isAdmin: boolean;
            isSuperAdmin: boolean;
            isVegetarian: boolean;
            isManager: boolean;
            isSupplier: boolean;
            allowNotifications: boolean;
            /** Format: int32 */
            preferredLocationId?: number | null;
            assignedLocations: components["schemas"]["LocationDto"][];
        };
        CreateLocationCommand: {
            name: string;
            description: string;
            type: components["schemas"]["LocationType"];
            city: string;
            country: string;
            enableShift1: boolean;
            enableShift2: boolean;
            enableShift3: boolean;
            enableWeekday: boolean;
            enableWeekend: boolean;
            /** Format: int32 */
            supplierId?: number | null;
            adminEmails: string[];
        };
        UpdateLocationCommand: {
            /** Format: int32 */
            id: number;
            name: string;
            description: string;
            city: string;
            country: string;
            type: components["schemas"]["LocationType"];
            enableShift1: boolean;
            enableShift2: boolean;
            enableShift3: boolean;
            enableWeekday: boolean;
            enableWeekend: boolean;
            adminEmails: string[];
            /** Format: int32 */
            supplierId?: number | null;
        };
        MonthlyMenuDto: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            year: number;
            /** Format: int32 */
            month: number;
            dailyMenus: components["schemas"]["DailyMenuDto"][];
        };
        DailyMenuDto: {
            /** Format: int32 */
            monthlyMenuId: number;
            /** Format: date */
            date: string;
            shiftMenus: components["schemas"]["ShiftMenuDto"][];
        };
        ShiftMenuDto: {
            shift: components["schemas"]["ShiftType"];
            dishes: components["schemas"]["DishDto"][];
        };
        /** @enum {integer} */
        ShiftType: ShiftType;
        DishDto: {
            /** Format: int32 */
            id: number;
            name: string;
            type: components["schemas"]["DishType"];
        };
        /** @enum {integer} */
        DishType: DishType;
        MonthlyMenuStatusDto: {
            /** Format: int32 */
            month: number;
            status: components["schemas"]["MenuStatus"];
            /** Format: int32 */
            monthlyMenuId?: number | null;
        };
        /** @enum {integer} */
        MenuStatus: MenuStatus;
        WeeklyOrderDto: {
            dailyOrders: components["schemas"]["DailyOrderDto"][];
            /** Format: int32 */
            numberOfShiftsOrdered: number;
            /** Format: int32 */
            numberOfShiftsScanned: number;
            /** Format: int32 */
            numberOfShiftsRemaining: number;
        };
        DailyOrderDto: {
            /** Format: int32 */
            id: number;
            status: components["schemas"]["DailyOrderStatus"];
            /** Format: date */
            date: string;
            locationName: string;
            canCancelOrder: boolean;
            shiftOrders: components["schemas"]["ShiftOrderDto"][];
        };
        /** @enum {integer} */
        DailyOrderStatus: DailyOrderStatus;
        ShiftOrderDto: {
            /** Format: int32 */
            id: number;
            status: components["schemas"]["ShiftOrderStatus"];
            shiftType: components["schemas"]["ShiftType"];
            locationName?: string | null;
            dishes: components["schemas"]["DishDto"][];
        };
        /** @enum {integer} */
        ShiftOrderStatus: ShiftOrderStatus;
        DailyOrderStatusDto: {
            /** Format: date */
            date: string;
            isOrdered: boolean;
            dailyOrderInfo?: components["schemas"]["DailyOrderDto"] | null;
            canOrder: boolean;
        };
        CreateOrderCommand: {
            /** Format: int32 */
            locationId: number;
            /** Format: int32 */
            monthlyMenuId: number;
            /** Format: date */
            date: string;
            shiftOrders: components["schemas"]["ShiftOrderDto2"][];
        };
        ShiftOrderDto2: {
            shiftType: components["schemas"]["ShiftType"];
            dishIds: number[];
        };
        PaginatedListOfRedCodeRequestDto: {
            items: components["schemas"]["RedCodeRequestDto"][];
            /** Format: int32 */
            pageNumber: number;
            /** Format: int32 */
            totalPages: number;
            /** Format: int32 */
            totalCount: number;
            hasPreviousPage: boolean;
            hasNextPage: boolean;
        };
        RedCodeRequestDto: {
            /** Format: int32 */
            id: number;
            fullName: string;
            workEmail: string;
            status: components["schemas"]["RedCodeRequestStatus"];
            note: string;
            workLocationName: string;
            /** Format: int32 */
            orderNumbers: number;
            role: components["schemas"]["RedCodeRequesterRole"];
            /** Format: date-time */
            created: string;
            /** Format: date */
            checkInDate?: string | null;
            guestTitle?: string | null;
            guestContactNumber?: string | null;
            guestPurposeOfVisit?: string | null;
            /** Format: date */
            guestDateOfArrival?: string | null;
            department?: components["schemas"]["BasicDepartmentDto"] | null;
            departmentChargeCode?: components["schemas"]["DepartmentChargeCodeDto"] | null;
            redScanCode?: components["schemas"]["RedScanCode"] | null;
        };
        /** @enum {integer} */
        RedCodeRequestStatus: RedCodeRequestStatus;
        /** @enum {integer} */
        RedCodeRequesterRole: RedCodeRequesterRole;
        BasicDepartmentDto: {
            /** Format: int32 */
            id: number;
            name: string;
        };
        RedScanCode: components["schemas"]["ScanCode"] & {
            redCodeId?: string;
            /** Format: int32 */
            maxNumScans?: number;
            redCodeRequest?: components["schemas"]["RedCodeRequest"];
            /** Format: int32 */
            redCodeRequestId?: number;
            /** Format: int32 */
            orderNumbers?: number;
            location?: components["schemas"]["Location"];
            /** Format: int32 */
            locationId?: number;
        };
        RedCodeRequest: components["schemas"]["BaseAuditableEntity"] & {
            fullName?: string;
            workEmail?: string;
            /** Format: date */
            checkInDate?: string | null;
            guestPurposeOfVisit?: string | null;
            status?: components["schemas"]["RedCodeRequestStatus"];
            note?: string;
            workLocation?: components["schemas"]["Location"];
            /** Format: int32 */
            workLocationId?: number;
            /** Format: int32 */
            orderNumbers?: number;
            department?: components["schemas"]["Department"];
            departmentChargeCode?: components["schemas"]["DepartmentChargeCode"] | null;
            redScanCode?: components["schemas"]["RedScanCode"] | null;
        };
        Location: components["schemas"]["BaseEntity"] & {
            name?: string;
            description?: string;
            type?: components["schemas"]["LocationType"];
            city?: string;
            country?: string;
            enableShift1?: boolean;
            enableShift2?: boolean;
            enableShift3?: boolean;
            enableWeekday?: boolean;
            enableWeekend?: boolean;
            isActive?: boolean;
            supplier?: components["schemas"]["Supplier"] | null;
            /** Format: int32 */
            supplierId?: number | null;
            admins?: components["schemas"]["User"][];
        };
        Supplier: components["schemas"]["BaseEntity"] & {
            name?: string;
            country?: string;
            certificateOfBusinessNumber?: string;
            /** Format: date */
            contractStartDate?: string;
            /** Format: date */
            contractEndDate?: string;
            address?: string;
            phoneNumber?: string;
            email?: string;
            picName?: string;
            picPhoneNumber?: string;
            baseLocation?: string;
            userId?: string | null;
            isActive?: boolean;
            assignedLocations?: components["schemas"]["Location"][];
        };
        BaseEntity: {
            /** Format: int32 */
            id: number;
            domainEvents: components["schemas"]["BaseEvent"][];
        };
        BaseEvent: Record<string, never>;
        User: {
            id: string;
            email: string;
            name: string;
            isAdmin: boolean;
            isVegetarian: boolean;
            isManager: boolean;
            isSupplier: boolean;
            allowNotifications: boolean;
            preferredLocation?: components["schemas"]["Location"] | null;
            /** Format: int32 */
            preferredLocationId?: number | null;
            assignedLocations: components["schemas"]["Location"][];
        };
        Department: components["schemas"]["BaseEntity"] & {
            name?: string;
            chargeCodes?: components["schemas"]["DepartmentChargeCode"][];
        };
        DepartmentChargeCode: components["schemas"]["BaseEntity"] & {
            name?: string;
            department?: components["schemas"]["Department"];
            /** Format: int32 */
            departmentId?: number;
            code?: string | null;
        };
        BaseAuditableEntity: components["schemas"]["BaseEntity"] & {
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            lastModified?: string;
            lastModifiedBy?: string | null;
        };
        ScanCode: components["schemas"]["BaseAuditableEntity"] & {
            type?: components["schemas"]["CodeType"];
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTill?: string;
            isDisabled?: boolean;
            disabledReason?: string;
        };
        DisableRedCodeCommand: {
            /** Format: int32 */
            redCodeRequestId: number;
            reason: string;
        };
        RedCodeRequestSummaryDto: {
            /** Format: int32 */
            locationId: number;
            /** Format: int32 */
            totalRequests: number;
            requestsByStatus: {
                [key: string]: number;
            };
        };
        RequestRedCodeCommand: {
            fullName: string;
            /** Format: int32 */
            workLocationId: number;
            workEmail: string;
            /** Format: int32 */
            orderNumbers: number;
            /** Format: date */
            checkInDate?: string | null;
            /** Format: int32 */
            departmentId: number;
            /** Format: int32 */
            departmentChargeCodeId?: number | null;
            guestPurposeOfVisit?: string | null;
        };
        ApproveRedCodeRequestCommand: {
            /** Format: int32 */
            id: number;
            note?: string | null;
        };
        RejectRedCodeRequestCommand: {
            /** Format: int32 */
            id: number;
            note: string;
        };
        DailyOrderReportDto: {
            dailyOrders: components["schemas"]["DailyReportDish"][];
            /** Format: int32 */
            numberOfPreOrder: number;
        };
        DailyReportDish: {
            dailyOrders: components["schemas"]["DailyReportDish"][];
            date: string;
            dish: string;
            shift: string;
            /** Format: int32 */
            ordersNumber: number;
        };
        ShiftCheckinsReportDto: {
            shiftCheckins: components["schemas"]["CheckinDto"][];
            /** Format: int32 */
            numberOfGreenScanned: number;
            /** Format: int32 */
            numberOfBlueScanned: number;
            /** Format: int32 */
            numberOfRedScanned: number;
        };
        CheckinDto: {
            date: string;
            type: components["schemas"]["CodeType"];
            shift: string;
            userId?: string | null;
            scanCodeId?: string | null;
            redcheckin_scancodeid?: string | null;
        };
        SubmitLogCommand: {
            userId: string;
            /** Format: int32 */
            locationId: number;
            /** Format: int32 */
            shiftOrderId: number;
            /** Format: date-time */
            scanTime: string;
            scanCode: string;
            log: string;
        };
        SupplierDto: {
            /** Format: int32 */
            id: number;
            name: string;
            country: string;
            certificateOfBusinessNumber: string;
            /** Format: date */
            contractStartDate: string;
            /** Format: date */
            contractEndDate: string;
            address: string;
            phoneNumber: string;
            email: string;
            picName: string;
            picPhoneNumber: string;
            baseLocation: string;
            userId?: string | null;
            isActive: boolean;
            assignedLocations: components["schemas"]["LocationDto"][];
        };
        CreateSupplierCommand: {
            name: string;
            country: string;
            certificateOfBusinessNumber: string;
            /** Format: date */
            contractStartDate: string;
            /** Format: date */
            contractEndDate: string;
            address: string;
            phoneNumber: string;
            email: string;
            picName: string;
            picPhoneNumber: string;
            baseLocation: string;
            locationIds: number[];
        };
        UpdateSupplierCommand: {
            /** Format: int32 */
            id: number;
            name: string;
            country: string;
            certificateOfBusinessNumber: string;
            /** Format: date */
            contractStartDate: string;
            /** Format: date */
            contractEndDate: string;
            address: string;
            phoneNumber: string;
            email: string;
            picName: string;
            picPhoneNumber: string;
            baseLocation: string;
            locationIds: number[];
        };
        ConfigDto: {
            allowedCities: string[];
            allowedCountries: string[];
        };
        UpdateProfileCommand: {
            name: string;
            isVegetarian: boolean;
            allowNotifications: boolean;
            /** Format: int32 */
            preferredLocationId?: number | null;
        };
        AdminDto: {
            id: string;
            email: string;
            name: string;
            isAdmin: boolean;
            assignedLocations: components["schemas"]["LocationDto"][];
        };
        UpdateAdminCommand: {
            email: string;
            locationIds: number[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    CheckinBlueQr: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckinBlueQrCommand"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckinResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    CheckinGreenQr: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckinGreenQrCommand"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckinResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    CheckinRedQr: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckinRedQrCommand"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckinResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetWeeklyBlueCheckins: {
        parameters: {
            query: {
                firstDayOfWeek: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeeklyBlueCheckinDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    ExportFteCheckins: {
        parameters: {
            query: {
                locationId: number;
                year: number;
                month: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetDepartments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DepartmentDto"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetLocations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocationDto"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    CreateLocation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLocationCommand"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocationDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    UpdateLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLocationCommand"];
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    ActivateLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    DeactivateLocation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetMonthlyMenuTemplate: {
        parameters: {
            query: {
                locationId: number;
                year: number;
                month: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetMonthlyMenus: {
        parameters: {
            query: {
                locationId: number;
                year: number;
                month: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonthlyMenuDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    CreateMonthlyMenus: {
        parameters: {
            query: {
                locationId: number;
                year: number;
                month: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string | null;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetWeeklyMenu: {
        parameters: {
            query: {
                locationId: number;
                firstDayOfWeek: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyMenuDto"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetMonthlyMenusStatus: {
        parameters: {
            query: {
                locationId: number;
                year: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonthlyMenuStatusDto"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    DeleteMonthlyMenus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    PublishMonthlyMenu: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetWeeklyOrders: {
        parameters: {
            query: {
                firstDayOfWeek: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeeklyOrderDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    CreateOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderCommand"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetWeeklyOrdersStatus: {
        parameters: {
            query: {
                locationId: number;
                firstDayOfWeek: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyOrderStatusDto"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    CancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetRedCodeRequests: {
        parameters: {
            query: {
                email?: string | null;
                name?: string | null;
                status?: components["schemas"]["RedCodeRequestStatus"] | null;
                pageNumber: number;
                pageSize: number;
                ReportDate?: string | null;
                LocationId?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedListOfRedCodeRequestDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    RequestRedCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestRedCodeCommand"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetMyRedCodeRequests: {
        parameters: {
            query: {
                email?: string | null;
                name?: string | null;
                status?: components["schemas"]["RedCodeRequestStatus"] | null;
                pageNumber: number;
                pageSize: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedListOfRedCodeRequestDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    DisableRedCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DisableRedCodeCommand"];
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetRedCodeRequestsSummary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                locationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RedCodeRequestSummaryDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    ApproveRedCodeRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApproveRedCodeRequestCommand"];
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    RejectRedCodeRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RejectRedCodeRequestCommand"];
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetDailyOrdersReport: {
        parameters: {
            query: {
                reportDate: string;
                locationId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyOrderReportDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetShiftCheckinsReport: {
        parameters: {
            query: {
                reportDate: string;
                locationId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShiftCheckinsReportDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    SubmitLog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitLogCommand"];
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetSuppliers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupplierDto"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    CreateSupplier: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSupplierCommand"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetSupplier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupplierDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    UpdateSupplier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSupplierCommand"];
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetUserSupplier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                UserId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupplierDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    ActivateSupplier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    DeactivateSupplier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetConfigs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetMe: {
        parameters: {
            query?: {
                includeAssignedLocations?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    UpdateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileCommand"];
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    GetAdmins: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminDto"][];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    UpdateAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAdminCommand"];
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
    DeactivateAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomErrorResponse"];
                };
            };
        };
    };
}
export enum CodeType {
    Green = 0,
    Blue = 1,
    Red = 2,
    Purple = 3
}
export enum LocationType {
    Brewery = 0,
    HeadOffice = 1
}
export enum ShiftType {
    Shift1 = 0,
    Shift2 = 1,
    Shift3 = 2
}
export enum DishType {
    Main = 0,
    Vegetarian = 1,
    Dessert = 2,
    Soup = 3
}
export enum MenuStatus {
    NoMenu = 0,
    Published = 1,
    Uploaded = 2
}
export enum DailyOrderStatus {
    Ordered = 0,
    CanceledByUser = 1,
    CanceledBySystem = 2
}
export enum ShiftOrderStatus {
    Ordered = 0,
    Scanned = 1,
    CanceledByUser = 2,
    CanceledBySystem = 3
}
export enum RedCodeRequestStatus {
    Submitted = 0,
    Approved = 1,
    Rejected = 2,
    Disabled = 3
}
export enum RedCodeRequesterRole {
    Temps = 0,
    Contractors = 1,
    Guests = 2
}
